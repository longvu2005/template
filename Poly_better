int quickpow(int x, int b, int mod) {

    if (b == 0) return 1 % mod;
    if (b == 1) return x % mod;

    long long l = quickpow(x, b >> 1, mod);
    l = l * l % mod;

    if (b & 1) l = l * x % mod;
    return l;
}

namespace Shengyu2 {

#define LL long long
LL I, p;

struct Complex2 { // 此complex为二次剩余专用
    LL real, fals;

    Complex2(double a = 0, double b = 0) {
        real = a, fals = b;
    }

    Complex2 operator * (const Complex2 & x) {
        LL a, b;
        a = (real * x.real + fals * x.fals % mod * I) % mod;
        b = (real * x.fals + fals * x.real) % mod;
        return Complex2(a > 0 ? a : a + mod, b > 0 ? b : b + mod);
    }

    Complex2 operator % (const LL & mod) {
        real = real % mod;
        fals  = fals  % mod;
        return Complex2(real > 0 ? real : real + mod, fals > 0 ? fals : fals + mod);
    }
};

Complex2 quickpow(Complex2 x, LL b, LL mod) {

    if (b == 0) return Complex2(1, 0);
    if (b == 1) return x % mod;

    Complex2 l = quickpow(x, b >> 1, mod);
    l = (l * l) % mod;
    if (b & 1)
        l = (l * x) % mod;
    return l;
}

bool IsShengyu2(LL x, LL p) {
    return (::quickpow(x, (p - 1) >> 1, p) == 1) || (x == 0);
}

pair<LL, LL> GetShengyu2(long long n, LL MOD) { // ling : get n 的二次剩余
    p = mod;

    if (n == 0) return make_pair(0, 0);
    if (n == 1) return make_pair(1, mod - 1);
    if (IsShengyu2(n, p) == false)
        return make_pair(-1, -1); // (-1,-1) 表示无解

    srand(time(0));
    long long a = rand();

    while (IsShengyu2((a * a - n + mod) % mod, p)) a = rand();

    Complex2 ans(a, 1);
    I = ((a * a - n) % mod + mod) % mod;

    ans = quickpow(ans, (p + 1) >> 1, mod);
    LL ans1 = ans.real, ans2 = mod - ans.real;
    // 理论上n的二次剩余有两个, 有时候会ans1 == ans2
    return make_pair(min(ans1, ans2), max(ans1, ans2));
}
}

namespace Poly {

#define LL long long
typedef vector <int> vec;
// ling : !!!!! vector的size（）是ull，所以for的时候size（）不能 为0 , (ull)0 - 1 = inf
const int N = 4 * nax,  g = 3, invg = quickpow(g, mod - 2, mod);
vec xi, yi, f, v, a, InterP, InterPxi;
vec Q[N], P[N];// ling : 多项式快速多点求值和快速插值
long long p = mod, I, out1, out2, inv2 = quickpow(2, mod - 2, mod), realK;
vec aa, bb, tmpInv, tmpSqrt, F, G;
int rev[N], Inv[N];
int kp;
int gpow[55], invgpow[55];
bool NTTflag;

int GetInv(int x) {
    return ::quickpow(x, mod - 2, mod);
}

vec GetInvSum(vec a) {

    int n = a.size() - 1;
    vec s(n + 1), sinv(n + 1);

    s[0] = a[0];
    for (int i = 1; i <= n; i ++)
        s[i] = 1ll * s[i - 1] * a[i] % mod;
    sinv[n] = GetInv(s[n]);

    for (int i = n - 1; i >= 0; i --)
        sinv[i] = 1ll * sinv[i + 1] * a[i + 1] % mod;

    for (int i = 1; i <= n; i ++)
        sinv[i] = 1ll * sinv[i] * s[i - 1] % mod;

    return sinv;
}

vec PolyAdd(const vec &A, const vec &B) {
    vec ret = A;
    ret.resize(max(A.size(), B.size()));
    for (int i = 0; i <= B.size() - 1; i ++)
        ret[i] = (ret[i] + B[i]) % mod;
    return ret;
}

void NTT(vec &A, int type = 1) {

    if (NTTflag == false) {
        for (int i = 1; i <= 44; i ++) { // ling : 预处理：gpow[i] = p^((mod - 1) / (1 << i))
            gpow[i] = quickpow(g, (mod - 1) / (1 << i), mod);
            invgpow[i] = quickpow(invg, (mod - 1) / (1 << i), mod);
        }
        NTTflag = true;
    }

    int limit = A.size();

    for (int i = 0; i <= limit - 1; i ++)
        rev[i] = (rev[i >> 1] >> 1) | ((i & 1) * limit >> 1);
    for (int i = 0; i <= limit - 1; i ++)
        if (i > rev[i]) swap(A[i], A[rev[i]]);

    for (int half = 1, num = 1; half <= limit - 1; half <<= 1, num ++) { //ling: half = 待合并区间的长度的一半
        int gn = (type == 1) ? gpow[num] : invgpow[num];
        for (int L = 0; L <= limit - 1; L += (half << 1)) {
            long long gn_k = 1;
            for (int k = 0; k <= half - 1; k ++, gn_k = gn_k * gn % mod) {
                int x = A[L + k], y = gn_k * A[L + half + k] % mod;
                A[L + k] = (x + y) % mod;
                A[L + half + k] = ((x - y) % mod + mod) % mod;
            }
        }
    }

    if (type == -1) { // ling : type == -1 : 逆变换
        int inv = quickpow(limit, mod - 2, mod);
        for (int i = 0; i <= limit - 1; i ++)
            A[i] = (long long)A[i] * inv % mod;
    }

}

void out(vec x) {

    for (int i = 0; i <= x.size() - 1; i ++)
        cout << x[i] << " ";
    cout << endl;
}

vec Multiply(vec A, vec B) {

    int n = A.size() + B.size() - 1, limit = 1;
    while (limit < (A.size() + B.size())) limit <<= 1;

    A.resize(limit), NTT(A);
    B.resize(limit), NTT(B);

    for (int i = 0; i <= limit - 1; i ++)
        A[i] = 1ll * A[i] * B[i] % mod;

    NTT(A, -1), A.resize(n);

    return A;
}

vec GetInv(int Deg, vec A) {
    A.resize(Deg << 1);

    vec ret(1, quickpow(A[0], mod - 2, mod));

    for (int limit = 4; limit < (Deg << 2); limit <<= 1) {
        int deg = limit >> 1;

        tmpInv.resize(limit), ret.resize(limit);
        for (int i = 0; i <= deg - 1; i ++) //cout << limit << endl;
            tmpInv[i] = A[i];
        for (int i = deg; i <= limit - 1; i ++)
            tmpInv[i] = 0;

        NTT(tmpInv), NTT(ret);

        for (int i = 0; i <= limit - 1; i ++)
            ret[i] = (2 - 1LL * tmpInv[i] * ret[i] % mod) * ret[i] % mod;

        NTT(ret, -1), ret.resize(deg);
    }

    ret.resize(Deg);
    for (int i = 0; i <= Deg - 1; i ++)
        if (ret[i] < 0) ret[i] += mod;

    return ret;
}

vec differ(vec A) { // ling: 求导
    int n = A.size() - 1;
    for (int i = 0; i <= n - 1; i ++)
        A[i] = 1LL * A[i + 1] % mod * (i + 1) % mod;
    A[n] = 0;
    return A;
}

vec integ(vec A) { //ling : 多项式积分
    int n = A.size() - 1;
    A.push_back(0);
    Inv[1] = 1;
    for (int i = 2; i <= n + 1; i ++)
        Inv[i] = (long long)(mod - mod / i) * Inv[mod % i] % mod;

    for (int i = n; i >= 0; i --)
        A[i + 1] = 1LL * A[i] % mod * Inv[i + 1] % mod;
    A[0] = 0;
    return A;
}

vec GetLin(int deg, vec F) { //ling : 多项式取对数 （%n）
    F.resize(deg);
    F = Multiply(differ(F), GetInv(deg, F)), F.resize(deg - 1);
    return integ(F);
}

vec GetSqrt(int Deg, vec A) { //ling : 多项式开方
    A.resize(Deg << 1);
    vec ret(1, Shengyu2::GetShengyu2(A[0], mod).first); // 得到A[0] 的二次剩余

    for (int limit = 4; limit < (Deg << 2); limit <<= 1) {
        int deg = limit >> 1;

        tmpSqrt.resize(deg); ret.resize(deg);
        for (int i = 0; i <= deg - 1; i ++)
            tmpSqrt[i] = A[i];//ling : tmp is A now

        tmpSqrt = Multiply(tmpSqrt, GetInv(deg, ret)); // ling : tmp is A/ret now

        for (int i = 0; i <= deg - 1; i ++)
            ret[i] = (long long)(tmpSqrt[i] + ret[i]) * inv2 % mod;

        ret.resize(deg);
    }

    ret.resize(Deg);
    return ret;
}

vec GetExp(int Deg, vec A) { //ling : 多项式求指数
    A.resize(Deg << 1);
    vec ret = vec(1, 1);

    for (int limit = 4; limit < (Deg << 2); limit <<= 1) {
        int deg = limit >> 1;

        vec linret = GetLin(deg, ret);

        for (int i = 0; i <= deg - 1; i ++)
            linret[i] = (A[i] - linret[i] + mod) % mod;
        linret[0] = (linret[0] + 1) % mod;

        ret = Multiply(ret, linret);
        ret.resize(deg);
    }

    ret.resize(Deg);

    return ret;
}

vec opR(vec A) {
    for (int i = 0; i <= (A.size() - 1) >> 1; i ++)
        swap(A[i], A[A.size() - 1 - i]);
    return A;
}

pair<vec, vec> GetDiv(vec F, vec G) { //ling : 多项式整除和求余

    pair<vec, vec> ret;

    int n = F.size() - 1, m = G.size() - 1;

    ret.first = Multiply(opR(F), GetInv(n - m + 1, opR(G)));
    ret.first.resize(n - m + 1);
    ret.first = opR(ret.first);

    vec GQ = Multiply(G, ret.first);
    GQ.resize(m), ret.second.resize(m);
    for (int i = 0; i <= m - 1; i ++)
        ret.second[i] = (F[i] - GQ[i] + mod) % mod;

    return ret; // first: 商, second:余
}

struct big {

    vector < int > num;

    big() {
        num.clear(); num.push_back(0);
    }

    void scan() {

        num.clear();
        char c = getchar();

        while ('0' > c || c > '9')
            c = getchar();
        while ('0' <= c && c <= '9')
            num.push_back(c - '0'), c = getchar();

        for (int i = 0; i <= (num.size() - 1) >> 1; i ++)
            swap(num[i], num[num.size() - 1 - i]);
    }

    void print() {
        cout << num.back();
        for (int i = num.size() - 2, x; i >= 0; i --)
            putchar(num[i] + '0');
    }

} K, bigK, bigKK;

vec GetPow(vec aa, big k, int n) {

    int km = 0, ke = 0;

    {   /*ling : realK 看做真正的k， 前档0 的个数就是realK * num_zore
           这里的big 是高精数，若非则不需要
           km 就是 realK % mod，即的多项式的指数
           ke 就是 realK % (eular(mod) == mod - 1) ,即AA[0]的指数
        */
        if (bigK.num.size() >= 8) realK = 1e8;
        else
            for (int i = (int)bigK.num.size() - 1; i >= 0; i --)
                realK = realK * 10 + bigK.num[i];// ling ： 这里的realK也非真k，它唯一的作用就是与n / num_zore 比较大小

        {
            for (int i = bigK.num.size() - 1; i >= 1; i --)
                bigK.num[i - 1] = (bigK.num[i - 1] + (long long)bigK.num[i] % mod * 10) % mod;
            bigK.num.pop_back();

            km = bigK.num[0] % mod; // ling : km is 真k % mod;

            bigK = bigKK;
            for (int i = bigK.num.size() - 1; i >= 1; i --)
                bigK.num[i - 1] = (bigK.num[i - 1] + (long long)bigK.num[i] % (mod - 1) * 10) % (mod - 1);
            bigK.num.pop_back();

            ke = bigK.num[0] % (mod - 1); // ling : ke is 真k % Eular(mod)

        }
    }

    aa.resize(n);

    aa = opR(aa);
    while (aa.size() && aa[aa.size() - 1] == 0) aa.pop_back();
    int num_zore = n - aa.size();
    aa = opR(aa);

    if (num_zore * realK >= n)
        return vec(n);

    int first = aa[0], invfirst = quickpow(aa[0], mod - 2, mod);
    int first_ke = quickpow(first, ke, mod);

    for (int i = 0; i <= aa.size() - 1; i ++)
        aa[i] = 1ll * aa[i] * invfirst % mod;

    aa = GetLin(n, aa);
    for (int i = 0; i <= aa.size() - 1; i ++)
        aa[i] = 1ll * aa[i] * km % mod;
    aa = GetExp(n, aa);

    for (int i = 0; i <= aa.size() - 1; i ++)
        aa[i] = 1ll * aa[i] * first_ke % mod;

    num_zore = min(1ll * num_zore * realK, (long long)n); // ling：计算答案的前档0的个数 应用真k，但是如果真k太大就在前边return了

    aa = opR(aa);
    for (int i = 1; i <= num_zore; i ++)
        aa.push_back(0);
    aa = opR(aa);
    aa.resize(n);

    return aa;
}

vec MulT(vec a, vec b) { // ling : 玄学的转置乘法
    int n = a.size(), m = b.size();
    reverse(b.begin(), b.end()),
            b = Multiply(a, b);
    for (int i = 0; i <= n - 1; i ++)
        a[i] = b[i + m - 1];
    return a;
}

void Init(vec &A, int k, int l, int r) {

    if (l == r) {
        Q[k].resize(2);
        Q[k][0] = 1, Q[k][1] = (mod - A[l]);
        return ;
    }

    int mid = (l + r) >> 1;
    Init(A, k << 1, l, mid), Init(A, k << 1 | 1, mid + 1, r);
    Q[k] = Multiply(Q[k << 1], Q[k << 1 | 1]);
    return ;
}

void Multipoints(int k, int l, int r, vec F, vec &g) {
    F.resize(r - l + 1);
    if (l == r)  return void(g[l] = F[0]);
    int mid = (l + r) >> 1;

    Multipoints(k << 1, l, mid, MulT(F, Q[k << 1 | 1]), g);
    Multipoints(k << 1 | 1, mid + 1, r, MulT(F, Q[k << 1]), g);
}

void Multipoint(vec f, vec a, vec &v, int n) {
    f.resize(n + 1), a.resize(n);
    // ling ；调用此函数进行多项式多点快速求值
    // f : 系数数组， a ： 所求自变量数组 ， v 与自变量对应的最终答案数组
    // n = max（多项式项数，所求点数量）
    for (int i = 0; i <= a.size() - 1; i ++)
        a[i] %= mod;

    Init(a, 1, 0, n - 1), v.resize(n);
    Multipoints(1, 0, n - 1, MulT(f, GetInv(n + 1, Q[1])), v);
    return ;
}

void GetP(int p, int l, int r, const vec &xi) { // P(x) = PAI (0 <= i <= n - 1) (x - xi)

    if (l == r) {
        P[p].resize(2);
        P[p][0] = -xi[l], P[p][1] = 1; // x - xi[i]
        return ;
    }

    int mid = (l + r) >> 1;

    GetP(p << 1, l, mid, xi);
    GetP(p << 1 | 1, mid + 1, r, xi);
    P[p] = Multiply(P[p << 1], P[p << 1 | 1]);
}

vec InterPart(int p, int l, int r, const vec &xi, const vec &yi, const vec &InterPxi) {

    if (l == r) {
        vec ret;
        ret.push_back(1ll * yi[l] * InterPxi[l] % mod);
        return  ret;
    }

    int mid = (l + r) >> 1;

    return PolyAdd(Multiply(InterPart(p << 1, l, mid, xi, yi, InterPxi), P[p << 1 | 1]), Multiply(InterPart(p << 1 | 1, mid + 1, r, xi, yi, InterPxi), P[p << 1]));
}

void Interpolation(const vec &xi, const vec &yi, vec &f) {

    // ling 调用此函数进行多项式快速插值
    // x, y 已知横纵坐标
    // f 返回的系数数组

    GetP(1, 0, xi.size() - 1, xi);


    InterP = differ(P[1]);
    InterP.pop_back(); // ling ：求导之后最高位为0 ,pop()一下

    Multipoint(InterP, xi, InterPxi, xi.size());

    InterPxi = GetInvSum(InterPxi); // InterPxi -> InvInterPxi
    f = InterPart(1, 0, xi.size() - 1, xi, yi, InterPxi);
    return ;
}

}

S = B / 2 + I - 1

-----------------------------
number of tree n ^ (n - 2)

-----------------------------
Lagrange Interpolation

if deg is k and know k + 1 value

f(x) = sum (i = 1, i <= k + 1) {f(x[i]) * mul (j = 1, j <= k + 1, j != i) {(x - x[j]) / (x[i] - x[j]}}

-----------------------------
Alian trick:

opt[i - 1] <= opt[i];
ans = dp[n] + C * condition (ex: ngroup
- k == 0)
binary_search C
-----------------------------
pi: EV cua buoc thu (i + 1)
E = sum pi
pi: (thieu c1) + (thieu c2) + ... + (thieu cn)
   - (thieu c1, c2) - ...
(thieu c1) = ((c2 + ... + cm) / n)^i
pi: subset S, pi = (-1)^(M - 1 - |S|) * f(S)^i
f(S): sum cj / n

1 + x + x^2 + x^3 + ... = 1/(1-x)

E = (-1)^(m - 1) * sum (-1)^(|S|) / (1 - f(S)), with all subset S
  = (-1)^(m - 1) * sum (-1)^|S| * n / (n - k)
  = (-1)^(m - 1) * sum n / (n - k) * (count(k, 0) - count(k, 1))
  = (-1)^(m - 1) * sum n / (n - k) * dp(m, k)

k = sum cj = f(S) * n
co dinh k <= n, parity of |S|

count(k, par): # of subset S, sum = k, parity par
count(i, k, 0) = count(i - 1, k, 0) + count(i - 1, k - c[i], 1)
count(i, k, 1) = count(i - 1, k, 1) + count(i - 1, k - c[i], 0)
dp(i, k) = count(i, k, 0) - count(i, k, 1)
	 = dp(i - 1, k) - dp(i - 1, k - c[i])

f(i) = dp(i, 0) * x^0 + dp(i, 1) * x^1 + ... + dp(i, k) * x^k + ...
dp(i, k): he so cua x^k trong f(i)
dp(i - 1, k): he so cua x^k trong f(i - 1)
dp(i - 1, k - c[i]): he so cua x^(k - c[i]) trong f(i - 1)
f(i) = f(i - 1) - x^ci * f(i - 1)
     = (1 - x^ci) * f(i - 1)
f(m) = (1 - x^c1)(1 - x^c2)...(1-x^cm) 

dp(m, k) = he so cua x^k trong f(m)

FFT: p(x) * q(x), p(x) bac n, q(x) bac m
O(max(n, m) * log)

f(i): O(max(c1 + ... + c[i - 1], c[i]) * log)
f(m): O(mn * log)

-----------------------------
f(x) = (1-x)(1-x^2)...(1-x^n)
chia de tri: O(n * log^2)

huffman encoding tree:
a1, a2, ..., an
i, j: ai + aj
ai, aj min

(1-x)(1-x^2) => x^3
x^3 * (1-x^3) => x^6
x^4 * x^5
------------------------------

f(m) = (1 - x^c1)(1 - x^c2)...(1-x^cm)
c1, c2, ..., cm
priority queue

------------------------------

exp:
     dp(i, k) = dp(i - 1, k) - 2dp(i - 1, k - c[i]) + 3dp(i - 1, k - 2*c[i])         O(nm)

f(i) = dp(i, 0) * x^0 + dp(i, 1) * x^1 + ... + dp(i, k) * x^k + ...
dp(i, k): he so cua x^k trong f(i)
dp(i - 1, k): he so cua x^k trong f(i - 1)
dp(i - 1, k - c[i]): he so cua x^(k - c[i]) trong f(i - 1)
dp(i - 1, k - 2c[i]): he so cua x^(k - 2c[i]) trong f(i - 1)

f(i) = f(i - 1) - 2 * x^c[i] * f(i - 1) + 3 * x^(2 * c[i]) * f(i - 1)
     = (1 - 2x^ci + 3x^(2ci)) * f(i - 1)
f(m) = (1 - 2x^c1 + 3x^(2c1))((1 - 2x^c2 + 3x^(2c2))...(1 - 2x^cm + 3x^(2cm))

----------------------------

$\displaystyle\prod_{n \ge 1}(1 - x^{n}) = 1 + \displaystyle\sum_{i \ge 1}(-1)^{i}\left(x^{\frac{i(3i+1)}{2}} + x^{\frac{i(3i-1)}{2}}\right)$

/**
 *    author:  longvu
 *    created: 02/17/24 19:56:17
**/
#include<bits/stdc++.h>

using namespace std;

#define int long long
#define ld double
#define sz(x) ((int)x.size())
#define all(x) (x).begin(), (x).end()
const int INF = 1e18;
const int nax = (int)(201001);
const int mod = 1e9 + 7;

template<class X, class Y>
bool maximize(X& x, const Y y) {
    if (y > x) {x = y; return true;}
    return false;
}
template<class X, class Y>
bool minimize(X& x, const Y y) {
    if (y < x) {x = y; return true;}
    return false;
}

const ld is_query = -INF;
struct Line {
    ld m, b;
    mutable function<const Line*()> succ;
    bool operator<(const Line& rhs) const {
        if (rhs.b != is_query) return m < rhs.m;
        const Line* s = succ();
        if (!s) return 0;
        ld x = rhs.m;
        return b - s->b < (s->m - m) * x;
    }
};
struct HullDynamic : public multiset<Line> { // will maintain upper hull for maximum
    bool bad(iterator y) {
        auto z = next(y);
        if (y == begin()) {
            if (z == end()) return 0;
            return y->m == z->m && y->b <= z->b;
        }
        auto x = prev(y);
        if (z == end()) return y->m == x->m && y->b <= x->b;
        return (x->b - y->b) * (z->m - y->m) >= (y->b - z->b) * (y->m - x->m);
    }
    void insert_line(ld m, ld b) {
        auto y = insert({ m, b });
        if (bad(y)) { erase(y); return; }
        while (next(y) != end() && bad(next(y))) erase(next(y));
        y->succ = [ = ] { return next(y) == end() ? 0 : &*next(y); };
        while (y != begin() && bad(prev(y))) erase(prev(y));
        if (y != begin()) prev(y)->succ = [ = ] { return &*y; };
    }
    ld eval(ld x) {
        auto l = *lower_bound((Line) { x, is_query });
        return l.m * x + l.b;
    }
};

const ld delta = (ld)(0.0000000005);

bool is_larger(long double z) {
    return (z >= (long double)(1e-12));
}

int a[nax];
ld ans[nax];
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        a[i] += a[i - 1];
    }
    HullDynamic ms;
    for (int i = n; i >= 1; --i) {
        ms.insert_line(-i, a[i]);
        ld l = 0, r = 1e7 + 21;
        while (r - l >= delta) {
            ld mid = (l + r) / 2;
            if (is_larger(ms.eval(mid) + (ld)(i - 1) * mid - a[i - 1])) {
                l = mid + delta;
            } else {
                r = mid - delta;
            }
        }
        l -= delta;
        ans[i] = l;
    }
    for (int i = 1; i <= n; ++i) {
        cout << setprecision(6) << fixed << ans[i] << '\n';
    }
    return 0;
}

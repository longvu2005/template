struct LCA {
    int segt[7 * nax], fi[nax], h[nax];
    vector<int> euler;
    LCA(vector<int> adj[], int root) {
        dfs(adj, root, -1);
        build(0, 0, euler.size() - 1);
    }
 
    void dfs(vector<int> adj[], int u, int pa) {
        fi[u] = sz(euler);
        euler.push_back(u);
        for (auto v : adj[u]) {
            if (v == pa) continue;
            h[v] = h[u] + 1;
            dfs(adj, v, u);
            euler.push_back(u);
        }
    }
 
    void build(int si, int sl, int sr) {
        if (sl == sr) {
            segt[si] = euler[sl];
            return; 
        }
        int mid = (sl + sr) >> 1;
        build(2 * si + 1, sl, mid);
        build(2 * si + 2, mid + 1, sr);
        int l_n = segt[2 * si + 1], r_n = segt[2 * si + 2];
        segt[si] = (h[l_n] < h[r_n]) ? l_n : r_n;
    }
 
    int get(int si, int sl, int sr, int l, int r) {
        if (sl > r || sr < l) {
            return -1;
        }
        if (sl >= l && sr <= r) {
            return segt[si];
        }
        int mid = (sl + sr) >> 1;
        int l_n = get(2 * si + 1, sl, mid, l, r),
            r_n = get(2 * si + 2, mid + 1, sr, l, r);
        if (l_n == -1) return r_n;
        if (r_n == -1) return l_n;
        return (h[l_n] < h[r_n]) ? l_n : r_n;
    }
 
    int find_lca(int u, int v) {
        u = fi[u]; v = fi[v];
        if (v < u) {
            swap(u, v);
        }
        return get(0, 0, euler.size() - 1, u, v);
    }
};

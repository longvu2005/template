struct Twosat {
    int n, low[nax], num[nax], ncomp = 0, compID[nax], dp[nax];
    vector<int> adj[nax], adjp[nax];
    vector<int> st;
    int t = 0;
    void reserer(int _n) {
        n = _n;
        t = 0;
        ncomp = 0;
        st.clear();
        for (int i = 1; i <= 2 * n; ++i) {
            adj[i].clear(); adjp[i].clear();
            low[i] = num[i] = compID[i] = dp[i] = 0;
        }
    }

    void add(int u, int v) { // if u then v
        adj[u].push_back(v);
    }

    void dfs(int u) {
        num[u] = low[u] = ++t;
        st.push_back(u);
        for (auto v : adj[u]) {
            if (!num[v]) {
                dfs(v);
                minimize(low[u], low[v]);
            } else {
                minimize(low[u], num[v]);
            }
        }
        if (num[u] == low[u]) {
            ncomp++;
            while (st.back() != u) {
                compID[st.back()] = ncomp;
                num[st.back()] = low[st.back()] = INF;
                st.pop_back();
            }
            compID[u] = ncomp;
            num[u] = low[u] = INF;
            st.pop_back();
        }
    }

    vector<int> solve() {
        for (int i = 1; i <= 2 * n; ++i) {
            if (!num[i]) {
                dfs(i);
            }
        }
        for (int i = 1; i <= 2 * n; ++i) {
            num[i] = 0;
        }
        for (int u = 1; u <= 2 * n; ++u) {
            for (auto v : adj[u]) {
                if (compID[u] != compID[v]) {
                    adjp[compID[u]].push_back(compID[v]);
                }
            }
        }
        vector<int> topo;
        function<void(int)> dfsp = [&](int u) {
            num[u] = 1;
            for (auto v : adjp[u]) {
                if (!num[v]) {
                    dfs(v);
                }
            }
            topo.push_back(u);
        };
        for (int i = 1; i <= ncomp; ++i) {
            if (!num[i]) {
                dfsp(i);
            }
        }
        t = 0;
        for (auto u : topo) {
            dp[u] = ++t;
        }
        for (int i = 1; i <= n; ++i) {
            if (dp[compID[i]] == dp[compID[n + i]]) {
                return vector<int>({ -1});
            }
        }
        vector<int> res(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            res[i] = (dp[compID[i + n]] < dp[compID[i]] ? 0 : 1);
        }
        return res;
    }
};
